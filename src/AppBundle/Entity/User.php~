<?php

namespace AppBundle\Entity;

use ApiPlatform\Core\Annotation\ApiResource;
use Doctrine\ORM\Mapping as ORM;
use FOS\UserBundle\Model\User as BaseUser;
use FOS\UserBundle\Model\UserInterface;
use Symfony\Component\Serializer\Annotation\Groups;

/**
 * @ORM\Entity
 * @ORM\HasLifecycleCallbacks()
 * @ApiResource(
 *  attributes={
 *     "normalization_context"={"groups"={"user", "user-read"}},
 *     "denormalization_context"={"groups"={"user", "user-write"}},
 *     "filters"={"user.search"}
 * })
 */
class User extends BaseUser
{

    public function __construct()
    {
        parent::__construct();
        $this->addRole("ROLE_READER");
        $this->setEnabled(true);
    }

    /**
     * @ORM\Id
     * @ORM\Column(type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @Groups({"user"})
     */
    protected $email;

    /**
     * @ORM\Column(name="fullname", type="string", length=255, nullable=false)
     * @Groups({"user-read"})
     */
    protected $fullname;

    /**
     * @ORM\Column(name="firstname", type="string", length=255, nullable=false)
     * @Groups({"user"})
     */
    protected $firstname;

    /**
     * @ORM\Column(name="lastname", type="string", length=255, nullable=false)
     * @Groups({"user"})
     */
    protected $lastname;

    /**
     * @var datetime
     * 
     * @ORM\Column(name="birthdate", type="datetime", nullable=true)
     * @Groups({"user"})
     */
    protected $birthdate;

    /**
     * @Groups({"user-write"})
     */
    protected $plainPassword;

    /**
     * @Groups({"user-read"})
     */
    protected $username;
    /**
     * 
     * @ORM\ManyToOne(targetEntity="AppBundle\Entity\SubscriptionInfo")
     * @ORM\JoinColumn(name="subscriptioninfo_id", referencedColumnName="id")  
     * @Groups({"user"})
     */
    protected $subscriptionInfo;
    

    /**
    * @ORM\PrePersist
    */
    public function prePersist(){
        $fn = (string) $this->getLastname();
        $ln = (string) $this->getFirstname();
        $mailAdress = (string) $this->getEmail();
        $this->setFullname($ln.' '.$fn);
        $this->setUsername($mailAdress);
    }

    public function setEmail($email)
    {
        parent::setEmail($email);
        parent::setUsername($email);
    }

    public function setFullname($fullname)
    {
        $this->fullname = $fullname;

        return $this;
    }
    public function getFullname()
    {
        return $this->fullname;
    }

    public function isUser(UserInterface $user = null)
    {
        return $user instanceof self && $user->id === $this->id;
    }

    /**
     * Set firstname
     *
     * @param string $firstname
     *
     * @return User
     */
    public function setFirstname($firstname)
    {
        $this->firstname = $firstname;

        return $this;
    }

    /**
     * Get firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->firstname;
    }

    /**
     * Set lastname
     *
     * @param string $lastname
     *
     * @return User
     */
    public function setLastname($lastname)
    {
        $this->lastname = $lastname;

        return $this;
    }

    /**
     * Get lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->lastname;
    }

    /**
     * Set birthdate
     *
     * @param \DateTime $birthdate
     *
     * @return User
     */
    public function setBirthdate($birthdate)
    {
        $this->birthdate = $birthdate;

        return $this;
    }

    /**
     * Get birthdate
     *
     * @return \DateTime
     */
    public function getBirthdate()
    {
        return $this->birthdate;
    }

}
